//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Arcanoid
{
    public partial class @GameInputs : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""NewMap"",
            ""id"": ""0fcb43d8-f6ec-4486-a5f3-a4b1974f0cfd"",
            ""actions"": [
                {
                    ""name"": ""Movement1"",
                    ""type"": ""Value"",
                    ""id"": ""12d0fcb3-e20b-4f1e-a1a1-7a0f5c3da361"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement2"",
                    ""type"": ""Value"",
                    ""id"": ""78e0638f-c33d-4ffc-b97c-20c3dcab2c75"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Release"",
                    ""type"": ""Button"",
                    ""id"": ""171433fe-6155-4bed-96cb-9ea3aa2c607f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReleaseEditor"",
                    ""type"": ""Button"",
                    ""id"": ""f1042334-820e-48da-a651-56b92b0d14ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8d3a0926-59db-4082-9e1d-f568bdda6add"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""904ed291-9ac8-4744-9c99-2263d06307f5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ffed25f6-5305-4ac9-b5e3-51ca15ad3928"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1334f87c-6a38-4e41-858a-f3ad01458eb7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c9c5d121-1fd5-4fae-8f8b-327bbcfa9b86"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4bf4f75f-50ab-4c43-b6f5-ffe882d0e15d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""45672990-23c5-430f-b396-04c2e3283647"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""db04aac5-082d-46d6-9043-4ad0b7accd75"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e5cf7a81-b301-4739-b711-68c95f312547"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5cb09976-c072-485c-a2af-e50b004e27df"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fb4f3c1e-01dc-4f91-8b75-d0b04b5b2e01"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Release"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a2a93b8-2234-43c9-b3b1-65ed296fbe9a"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReleaseEditor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // NewMap
            m_NewMap = asset.FindActionMap("NewMap", throwIfNotFound: true);
            m_NewMap_Movement1 = m_NewMap.FindAction("Movement1", throwIfNotFound: true);
            m_NewMap_Movement2 = m_NewMap.FindAction("Movement2", throwIfNotFound: true);
            m_NewMap_Release = m_NewMap.FindAction("Release", throwIfNotFound: true);
            m_NewMap_ReleaseEditor = m_NewMap.FindAction("ReleaseEditor", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // NewMap
        private readonly InputActionMap m_NewMap;
        private INewMapActions m_NewMapActionsCallbackInterface;
        private readonly InputAction m_NewMap_Movement1;
        private readonly InputAction m_NewMap_Movement2;
        private readonly InputAction m_NewMap_Release;
        private readonly InputAction m_NewMap_ReleaseEditor;
        public struct NewMapActions
        {
            private @GameInputs m_Wrapper;
            public NewMapActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement1 => m_Wrapper.m_NewMap_Movement1;
            public InputAction @Movement2 => m_Wrapper.m_NewMap_Movement2;
            public InputAction @Release => m_Wrapper.m_NewMap_Release;
            public InputAction @ReleaseEditor => m_Wrapper.m_NewMap_ReleaseEditor;
            public InputActionMap Get() { return m_Wrapper.m_NewMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NewMapActions set) { return set.Get(); }
            public void SetCallbacks(INewMapActions instance)
            {
                if (m_Wrapper.m_NewMapActionsCallbackInterface != null)
                {
                    @Movement1.started -= m_Wrapper.m_NewMapActionsCallbackInterface.OnMovement1;
                    @Movement1.performed -= m_Wrapper.m_NewMapActionsCallbackInterface.OnMovement1;
                    @Movement1.canceled -= m_Wrapper.m_NewMapActionsCallbackInterface.OnMovement1;
                    @Movement2.started -= m_Wrapper.m_NewMapActionsCallbackInterface.OnMovement2;
                    @Movement2.performed -= m_Wrapper.m_NewMapActionsCallbackInterface.OnMovement2;
                    @Movement2.canceled -= m_Wrapper.m_NewMapActionsCallbackInterface.OnMovement2;
                    @Release.started -= m_Wrapper.m_NewMapActionsCallbackInterface.OnRelease;
                    @Release.performed -= m_Wrapper.m_NewMapActionsCallbackInterface.OnRelease;
                    @Release.canceled -= m_Wrapper.m_NewMapActionsCallbackInterface.OnRelease;
                    @ReleaseEditor.started -= m_Wrapper.m_NewMapActionsCallbackInterface.OnReleaseEditor;
                    @ReleaseEditor.performed -= m_Wrapper.m_NewMapActionsCallbackInterface.OnReleaseEditor;
                    @ReleaseEditor.canceled -= m_Wrapper.m_NewMapActionsCallbackInterface.OnReleaseEditor;
                }
                m_Wrapper.m_NewMapActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement1.started += instance.OnMovement1;
                    @Movement1.performed += instance.OnMovement1;
                    @Movement1.canceled += instance.OnMovement1;
                    @Movement2.started += instance.OnMovement2;
                    @Movement2.performed += instance.OnMovement2;
                    @Movement2.canceled += instance.OnMovement2;
                    @Release.started += instance.OnRelease;
                    @Release.performed += instance.OnRelease;
                    @Release.canceled += instance.OnRelease;
                    @ReleaseEditor.started += instance.OnReleaseEditor;
                    @ReleaseEditor.performed += instance.OnReleaseEditor;
                    @ReleaseEditor.canceled += instance.OnReleaseEditor;
                }
            }
        }
        public NewMapActions @NewMap => new NewMapActions(this);
        public interface INewMapActions
        {
            void OnMovement1(InputAction.CallbackContext context);
            void OnMovement2(InputAction.CallbackContext context);
            void OnRelease(InputAction.CallbackContext context);
            void OnReleaseEditor(InputAction.CallbackContext context);
        }
    }
}
